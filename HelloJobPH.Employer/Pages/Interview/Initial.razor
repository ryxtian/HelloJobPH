@page "/Interview/initial"

@inject NavigationManager Navigation
@inject IClientInterviewService CandidateService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JS
<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="mt-4">
    <MudPaper Elevation="2" Class="pa-6">
        <MudStack Spacing="4">
            <!-- Header Section -->
            <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                <MudStack Spacing="1">
                    <MudText Typo="Typo.h5" Color="Color.Primary">
                        <MudIcon Icon="@Icons.Material.Filled.CalendarMonth" Class="mr-2" />
                        Initial Interviews
                    </MudText>
                    <MudText Typo="Typo.body2" Color="Color.Secondary">
                        Manage and review scheduled initial interview candidates
                    </MudText>
                </MudStack>
                <MudChip T="string" Icon="@Icons.Material.Filled.People" Color="Color.Info" Variant="Variant.Filled">
                    @initial.Count Candidate@(initial.Count != 1 ? "s" : "")
                </MudChip>
            </MudStack>

            <MudDivider />

            <!-- Table Section -->
            <MudTable Dense="false" 
                      Hover="true" 
                      Bordered="false" 
                      Striped="true"
                      Breakpoint="Breakpoint.Sm" 
                      Items="@initial"
                      Elevation="0"
                      Class="rounded-lg">
                <HeaderContent>
                    <MudTh><MudText Typo="Typo.subtitle2" Color="Color.Primary"><strong>Candidate</strong></MudText></MudTh>
                    <MudTh><MudText Typo="Typo.subtitle2" Color="Color.Primary"><strong>Position</strong></MudText></MudTh>
                    <MudTh><MudText Typo="Typo.subtitle2" Color="Color.Primary"><strong>Status</strong></MudText></MudTh>
                    <MudTh><MudText Typo="Typo.subtitle2" Color="Color.Primary"><strong>Resume</strong></MudText></MudTh>
                    <MudTh><MudText Typo="Typo.subtitle2" Color="Color.Primary"><strong>Interview Date</strong></MudText></MudTh>
                    <MudTh><MudText Typo="Typo.subtitle2" Color="Color.Primary"><strong>Time</strong></MudText></MudTh>
                    <MudTh><MudText Typo="Typo.subtitle2" Color="Color.Primary"><strong>Type</strong></MudText></MudTh>
                    <MudTh><MudText Typo="Typo.subtitle2" Color="Color.Primary"><strong>Actions</strong></MudText></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Candidate">
                        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                            <MudAvatar Color="Color.Primary" Size="Size.Small">
                                @context.Firstname?.Substring(0, 1)@context.Lastname?.Substring(0, 1)
                            </MudAvatar>
                            <MudText Typo="Typo.body2">
                                <strong>@context.Firstname @context.Lastname</strong>
                            </MudText>
                        </MudStack>
                    </MudTd>
                    <MudTd DataLabel="Position">
                        <MudText Typo="Typo.body2">@context.JobTitle</MudText>
                    </MudTd>
                    <MudTd DataLabel="Status">
                        <MudChip T="string" Size="Size.Small" Variant="Variant.Filled" Color="Color.Info">
                            @context.Status
                        </MudChip>
                    </MudTd>
                    <MudTd DataLabel="Resume">
                        <MudButton Href="C:\Users\ryanf\OneDrive\Desktop\HelloJobPH\HelloJobPH\HelloJobPH.Employer\wwwroot\Resume"
                                   Target="_blank" 
                                   StartIcon="@Icons.Material.Filled.Description" 
                                   Size="Size.Small" 
                                   Variant="Variant.Text" 
                                   Color="Color.Primary">
                            View
                        </MudButton>
                    </MudTd>
                    <MudTd DataLabel="Interview Date">
                        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                            <MudIcon Icon="@Icons.Material.Filled.Event" Size="Size.Small" Color="Color.Secondary" />
                            <MudText Typo="Typo.body2">@context.DateInterview?.ToString("dd MMM yyyy")</MudText>
                        </MudStack>
                    </MudTd>
                    <MudTd DataLabel="Time">
                        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                            <MudIcon Icon="@Icons.Material.Filled.AccessTime" Size="Size.Small" Color="Color.Secondary" />
                            <MudText Typo="Typo.body2">@context.TimeInterview</MudText>
                        </MudStack>
                    </MudTd>
                    <MudTd DataLabel="Type">
                        <MudChip T="string" Size="Size.Small" Variant="Variant.Outlined">@context.Type</MudChip>
                    </MudTd>
                    <MudTd DataLabel="Actions">
                        <MudMenu Icon="@Icons.Material.Filled.MoreVert" 
                                 Size="Size.Small" 
                                 Dense="true"
                                 AnchorOrigin="Origin.BottomLeft">
                            <MudMenuItem Icon="@Icons.Material.Filled.Schedule" OnClick="@(() => Reschedule(context))">Reschedule</MudMenuItem>
                            <MudMenuItem Icon="@Icons.Material.Filled.PersonOff" OnClick="@(() => NoAppearance(context.ApplicationId))">No Appearance</MudMenuItem>
                            <MudDivider />
                            <MudMenuItem Icon="@Icons.Material.Filled.Build" OnClick="@(() => ForTechnical(context))">Technical</MudMenuItem>
                            <MudMenuItem Icon="@Icons.Material.Filled.EmojiEvents" OnClick="@(() => ForFinal(context))">Final</MudMenuItem>

                            <MudMenuItem Icon="@Icons.Material.Filled.Cancel" OnClick="@(() => Failed(context.ApplicationId))" Class="mud-error-text">Failed</MudMenuItem>
                            <MudDivider />
                            <MudMenuItem OnClick="@(() => Delete(context.ApplicationId))" Icon="@Icons.Material.Filled.Delete" Class="mud-error-text">Delete</MudMenuItem>
                            <MudMenuItem Icon="@Icons.Material.Filled.Visibility" 
                                        OnClick="@(()=> NavigateToOverview(context.ApplicationId))">
                                Overview
                            </MudMenuItem>
                        </MudMenu>
                    </MudTd>
                </RowTemplate>
                <NoRecordsContent>
                    <MudStack AlignItems="AlignItems.Center" Spacing="3" Class="pa-8">
                        <MudIcon Icon="@Icons.Material.Filled.EventBusy" Size="Size.Large" Color="Color.Secondary" />
                        <MudText Typo="Typo.h6" Color="Color.Secondary">No Scheduled Interviews</MudText>
                        <MudText Typo="Typo.body2" Color="Color.Secondary">
                            There are no candidates scheduled for initial interviews at this time.
                        </MudText>
                    </MudStack>
                </NoRecordsContent>
            </MudTable>
        </MudStack>
    </MudPaper>
</MudContainer>

@code {
    private List<InterviewListDtos> initial = new();

    protected override async Task OnInitializedAsync()
    {
        initial = await CandidateService.InitialList();
    }

    private void NavigateToOverview(int applicationId)
    {
        Navigation.NavigateTo($"/reviewapplicant/reviewapplicant/{applicationId}");
    }

    private async Task Reschedule(InterviewListDtos candidate)
    {
        var parameters = new DialogParameters
        {
            { "Candidate", candidate }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };

        await DialogService.ShowAsync<RescheduleDialog>("Send Interview Invitation", parameters, options);


    }

    private async Task ForTechnical(InterviewListDtos candidate)
    {
        var parameters = new DialogParameters
        {
            { "Candidate", candidate }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };

        await DialogService.ShowAsync<ForTechnicalDialog>("Send Interview Invitation", parameters, options);


    }
    private async Task ForFinal(InterviewListDtos candidate)
    {
        var parameters = new DialogParameters
        {
            { "Candidate", candidate }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };

        await DialogService.ShowAsync<ForFinalDialog>("Send Interview Invitation", parameters, options);


    }
    private async Task NoAppearance(int id)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Confirm Action",
            "Are you sure you want to mark this candidate as 'No Appearance'?",
            cancelText: "Cancel",
            yesText: "Yes"
          
        );

        if (result == true)
        {
            var response = await CandidateService.NoAppearance(id);

            if (response > 0)
            {
                Snackbar.Add("Candidate marked as 'No Appearance'.", Severity.Success);
                await JS.InvokeVoidAsync("location.reload");
            }
            else
            {
                Snackbar.Add("Failed to update candidate status.", Severity.Error);
            }
        }
    }
    private async Task Failed(int id)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Confirm Action",
            "Are you sure you want to mark this candidate as 'Failed'?",
            cancelText: "Cancel",
            yesText: "Yes"

        );

        if (result == true)
        {
            var response = await CandidateService.Failed(id);

            if (response > 0)
            {
                Snackbar.Add("Candidate marked as 'Failed'.", Severity.Success);
                await JS.InvokeVoidAsync("location.reload");
            }
            else
            {
                Snackbar.Add("Failed to update candidate status.", Severity.Error);
            }
        }
    }
    private async Task Delete(int id)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Confirm Action",
            "Are you sure you want to mark this candidate as 'Failed'?",
            cancelText: "Cancel",
            yesText: "Yes"

        );

        if (result == true)
        {
            var response = await CandidateService.Delete(id);

            if (response > 0)
            {
                Snackbar.Add("Candidate marked as 'Delete'.", Severity.Success);
                await JS.InvokeVoidAsync("location.reload");
            }
            else
            {
                Snackbar.Add("Failed to update candidate status.", Severity.Error);
            }
        }
    }

}