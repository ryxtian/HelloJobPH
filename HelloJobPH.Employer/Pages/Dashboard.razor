@page "/dashboard"
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager Navigation
@using MudBlazor
@using System.Security.Claims
@attribute [Authorize]

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudText Typo="Typo.h4" GutterBottom="true">Dashboard</MudText>

    @if (userFullName is not null)
    {
        <MudText Typo="Typo.h6" GutterBottom="true">Hello, <b>@userFullName</b>!</MudText>
    }

    <MudGrid Class="mt-3" GutterSize="3">
        <MudItem xs="12" sm="6" md="4">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.subtitle1">Total Users</MudText>
                    <MudText Typo="Typo.h5">@totalUsers</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <MudItem xs="12" sm="6" md="4">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.subtitle1">Newly Hired</MudText>
                    <MudText Typo="Typo.h5">@newOrders</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <MudItem xs="12" sm="12" md="4">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.subtitle1">zxc</MudText>
                    <MudText Typo="Typo.h5">@revenue.ToString("C")</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>

    <MudPaper Class="mt-5 p-4">
        <MudText Typo="Typo.h6" GutterBottom="true">Monthly Applicants Chart</MudText>
        <MudChart ChartType="ChartType.Line" Labels="@months" Values="@monthlySales" />
    </MudPaper>

    <MudButton Variant="Variant.Filled" Color="Color.Error" Class="mt-4" OnClick="@Logout">Logout</MudButton>
</MudContainer>

@code {
    private string? userFullName;

    private int totalUsers = 128;
    private int newOrders = 24;
    private decimal revenue = 5432.75m;

    private string[] months = new[] { "Jan", "Feb", "Mar", "Apr", "May", "Jun" };
    private double[] monthlySales = new double[] { 1200, 1500, 1800, 2000, 1700, 2200 };

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            var firstName = user.FindFirst(c => c.Type == ClaimTypes.Name)?.Value;
            var lastName = user.FindFirst(c => c.Type == ClaimTypes.Surname)?.Value;
            userFullName = $"{firstName} {lastName}";
        }
    }

    private void Logout()
    {
        Navigation.NavigateTo("/login", true);
    }
}
