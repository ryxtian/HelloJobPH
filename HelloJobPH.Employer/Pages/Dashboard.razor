@page "/dashboard"
@using HelloJobPH.Employer.JwtAuthStateProviders
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager Navigation
@using MudBlazor
@attribute [Authorize]

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-6">
    <MudPaper Class="pa-6">
        <MudText Typo="Typo.h4" GutterBottom="true" Color="Color.Primary">Dashboard</MudText>

        @if (user != null && user.Identity != null && user.Identity.IsAuthenticated)
        {
            <MudDivider Class="mb-3" />
            <MudText Typo="Typo.h6">Welcome, <b>@fullName</b> 👋</MudText>
            <MudText Typo="Typo.body1">Email: @email</MudText>
            <MudText Typo="Typo.body1">Role: @role</MudText>
            <MudText Typo="Typo.body1">User ID: @userId</MudText>

            <MudButton Color="Color.Error" Variant="Variant.Filled" Class="mt-3" OnClick="Logout">
                Logout
            </MudButton>
        }
        else
        {
            <MudText Typo="Typo.h6" Color="Color.Error">Not authenticated. Redirecting...</MudText>
        }
    </MudPaper>
</MudContainer>

@code {
    private ClaimsPrincipal? user;
    private string? fullName;
    private string? email;
    private string? role;
    private string? userId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            // Extract values from claims
            var firstName = user.FindFirst(c => c.Type == ClaimTypes.Name)?.Value;
            var lastName = user.FindFirst(c => c.Type == ClaimTypes.Surname)?.Value;
            fullName = $"{firstName} {lastName}";
            email = user.FindFirst(c => c.Type == ClaimTypes.Email)?.Value;
            role = user.FindFirst(c => c.Type == ClaimTypes.Role)?.Value;
            userId = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
        }
        else
        {
            Navigation.NavigateTo("/login", true);
        }
    }

    private async Task Logout()
    {
        if (AuthProvider is JwtAuthStateProvider jwtAuth)
        {
            await jwtAuth.MarkUserAsLoggedOut();
        }

        Navigation.NavigateTo("/login", true);
    }
}
