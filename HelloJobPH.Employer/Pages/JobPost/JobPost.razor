@page "/jobpost/jobpost"

@using MudBlazor
@inject IJobPosting JobPostingService
@attribute [Authorize]
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthProvider

<MudButton OnClick="AddNewJob" Variant="Variant.Filled" Color="Color.Primary" Class="mb-4">Add New Job Post</MudButton>

<MudTable Items="@jobPostings" Filter="FilterFunc1" @bind-SelectedItem="selectedItem1" Hover="true" Elevation="1">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Job Postings</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" />
    </ToolBarContent>

    <HeaderContent>
        <MudTh>Title</MudTh>
        <MudTh>Description</MudTh>
        <MudTh>Salary Range</MudTh>
        <MudTh>Date Posted</MudTh>
        <MudTh>Options</MudTh>
    </HeaderContent>

    <RowTemplate>
        <MudTd DataLabel="Title">@context.Title</MudTd>
        <MudTd DataLabel="Description">@context.Description</MudTd>
        <MudTd DataLabel="Salary Range">@($"{context.SalaryFrom} - {context.SalaryTo}")</MudTd>
        <MudTd DataLabel="Date Posted">@context.PostedDate.ToLocalTime().ToString("MM/dd/yyyy")</MudTd>
        <MudTd DataLabel="Options">
            <MudButton Color="Color.Primary" Variant="Variant.Outlined" OnClick="@(() => OnEdit(context.JobPostingId))" Size="Size.Small">
                Edit
            </MudButton>
            <MudButton Color="Color.Error" Variant="Variant.Outlined" Size="Size.Small" Disabled="@isDeleting" OnClick="@(() => OnDelete(context.JobPostingId))" Class="ml-2">
                Delete
            </MudButton>
        </MudTd>
    </RowTemplate>

    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>


@code {
    private string searchString1 = string.Empty;
    private bool isDeleting = false;
    private JobPostingDtos selectedItem1;
    protected List<JobPostingDtos>? jobPostings;


    private ClaimsPrincipal? user;
    private string? fullName;
    private string? email;
    private string? role;
    private string? userId;
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            // Extract values from claims
            var firstName = user.FindFirst(c => c.Type == ClaimTypes.Name)?.Value;
            var lastName = user.FindFirst(c => c.Type == ClaimTypes.Surname)?.Value;
            fullName = $"{firstName} {lastName}";
            email = user.FindFirst(c => c.Type == ClaimTypes.Email)?.Value;
            role = user.FindFirst(c => c.Type == ClaimTypes.Role)?.Value;
            userId = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
        }
        else
        {
            Navigation.NavigateTo("/login", true);
        }




        jobPostings = await JobPostingService.RetrieveAllAsync();
    }

    private bool FilterFunc1(JobPostingDtos element)
    {
        if (string.IsNullOrWhiteSpace(searchString1))
            return true;

        return (element.Title?.Contains(searchString1, StringComparison.OrdinalIgnoreCase) ?? false)
            || (element.Description?.Contains(searchString1, StringComparison.OrdinalIgnoreCase) ?? false)
            || (element.JobRequirements?.Contains(searchString1, StringComparison.OrdinalIgnoreCase) ?? false)
            || $"{element.SalaryFrom} {element.SalaryTo}".Contains(searchString1);
    }
    public void AddNewJob()
    {
        Navigation.NavigateTo("/JobPost/JobPostForm");
    }


    public void OnEdit(int id)
    {
        Navigation.NavigateTo($"/JobPost/editjobPost/{id}");
    }
    public async Task OnDelete(int id)
    {
        isDeleting = true;
        try
        {
            var success = await JobPostingService.SoftDeleteJobPost(id);

            if (success)
            {
                Snackbar.Add("Job post deleted successfully.", Severity.Success);
                jobPostings = await JobPostingService.RetrieveAllAsync();
            }
            else
            {
                Snackbar.Add("Failed to delete job post.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception during soft delete: {ex.Message}");
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
        finally
        {
            isDeleting = false;
        }
    }
}
