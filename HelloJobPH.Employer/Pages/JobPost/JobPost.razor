@page "/jobpost/jobpost"

@using MudBlazor
@inject IJobPosting JobPostingService
@attribute [Authorize]
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthProvider

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="py-6">
    <!-- Header Section -->
    <MudPaper Elevation="0" Class="pa-6 mb-6 rounded-lg" Style="background: linear-gradient(135deg, var(--mud-palette-primary) 0%, var(--mud-palette-primary-darken) 100%);">
        <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
            <MudStack Spacing="1">
                <MudText Typo="Typo.h4" Class="font-weight-bold" Style="color: white;">
                    Job Postings
                </MudText>
                <MudText Typo="Typo.body1" Style="color: rgba(255,255,255,0.9);">
                    Manage and track all your job openings
                </MudText>
            </MudStack>
            <MudButton OnClick="AddNewJob" 
                       Variant="Variant.Filled" 
                       StartIcon="@Icons.Material.Filled.Add"
                       Size="Size.Large"
                       Style="background-color: white; color: var(--mud-palette-primary); box-shadow: 0 4px 6px rgba(0,0,0,0.1);">
                Add New Job Post
            </MudButton>
        </MudStack>
    </MudPaper>

    <!-- Job Cards Grid -->
    <MudGrid Spacing="4">
        @if (jobPostings is not null && jobPostings.Any())
        {
            @foreach (var job in jobPostings)
            {
                <MudItem xs="12" sm="6" md="4">
                    <MudCard Elevation="2" Class="rounded-xl overflow-hidden" Style="height: 100%; transition: all 0.3s ease; border: 1px solid rgba(0,0,0,0.05);">
                        <!-- Color Accent Bar -->
                        <div style="height: 4px; background: linear-gradient(90deg, var(--mud-palette-primary) 0%, var(--mud-palette-secondary) 100%);"></div>
                        
                        <MudCardContent Class="pa-5">
                            <!-- Company Avatar & Badge -->
                            <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Start" Class="mb-3">
                                <MudAvatar Size="Size.Large" 
                                          Color="Color.Primary" 
                                          Variant="Variant.Filled"
                                          Style="box-shadow: 0 4px 12px rgba(var(--mud-palette-primary-rgb), 0.3);">
                                    <MudIcon Icon="@Icons.Material.Filled.Work" Size="Size.Medium" />
                                </MudAvatar>
                                <MudChip T="string" Size="Size.Small" 
                                        Color="Color.Success" 
                                        Variant="Variant.Filled"
                                        Style="font-weight: 600;">
                                    Active
                                </MudChip>
                            </MudStack>

                            <!-- Job Title -->
                            <MudText Typo="Typo.h6" Class="font-weight-bold mb-2" Style="line-height: 1.3;">
                                @job.Title
                            </MudText>

                            <!-- Salary Range with Icon -->
                            <MudPaper Elevation="0" Class="pa-3 mb-3 rounded-lg" Style="background-color: rgba(var(--mud-palette-primary-rgb), 0.08);">
                                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                    <MudIcon Icon="@Icons.Material.Filled.AttachMoney" 
                                            Color="Color.Primary" 
                                            Size="Size.Small" />
                                    <MudText Typo="Typo.subtitle2" 
                                            Color="Color.Primary"
                                            Class="font-weight-bold">
                                        @job.SalaryFrom - @job.SalaryTo
                                    </MudText>
                                </MudStack>
                            </MudPaper>

                            <!-- Description -->
                            <MudText Typo="Typo.body2" Class="mb-3" Style="color: #666; line-height: 1.6;">
                                @(string.IsNullOrWhiteSpace(job.Description)
                                    ? "No description available."
                                    : job.Description.Length > 90
                                    ? job.Description.Substring(0, 90) + "..."
                                    : job.Description)
                            </MudText>

                            <!-- Openings Progress -->
                         @*    <MudStack Spacing="2" Class="mb-4">
                                <MudStack Row="true" Justify="Justify.SpaceBetween">
                                    <MudText Typo="Typo.caption" Class="font-weight-medium" Style="color: #666;">
                                        Open Positions
                                    </MudText>
                                    <MudText Typo="Typo.caption" Class="font-weight-bold" Color="Color.Primary">
                                        @job.NumberOfOpenings positions
                                    </MudText>
                                </MudStack>
                                <MudProgressLinear Color="Color.Primary"
                                                 Value="@(job.NumberOfOpenings * 10)"
                                                 Size="Size.Medium"
                                                 Rounded="true"
                                                 Style="height: 8px;" />
                            </MudStack> *@

                            <!-- Location -->
                            <MudPaper Elevation="0" Class="pa-2 mb-4 rounded" Style="background-color: #f5f5f5;">
                                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                                    <MudIcon Icon="@Icons.Material.Filled.LocationOn" 
                                            Size="Size.Small" 
                                            Style="color: #666;" />
                                    <MudText Typo="Typo.caption" Style="color: #666;">
                                        @job.Location
                                    </MudText>
                                </MudStack>
                            </MudPaper>

                            <!-- Action Buttons -->
                            <MudStack Row="true" Spacing="2">
                                <MudButton Variant="Variant.Filled" 
                                          OnClick="@(() => OnEdit(@job.JobPostingId))" 
                                          Color="Color.Primary"
                                          StartIcon="@Icons.Material.Filled.Edit"
                                          FullWidth="true"
                                          Style="text-transform: none; font-weight: 600;">
                                    Edit
                                </MudButton>
                                <MudButton Variant="Variant.Outlined" 
                                          OnClick="@(() => OnDelete(@job.JobPostingId))" 
                                          Color="Color.Error"
                                          StartIcon="@Icons.Material.Filled.Delete"
                                          FullWidth="true"
                                          Style="text-transform: none; font-weight: 600;">
                                    Remove
                                </MudButton>
                            </MudStack>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            }
        }
        else
        {
            <MudItem xs="12">
                <MudPaper Elevation="0" Class="pa-12 rounded-lg text-center" Style="background-color: #f9fafb;">
                    <MudIcon Icon="@Icons.Material.Filled.WorkOff" 
                            Size="Size.Large" 
                            Style="font-size: 4rem; color: #d1d5db; margin-bottom: 1rem;" />
                    <MudText Typo="Typo.h6" Class="font-weight-medium mb-2" Style="color: #6b7280;">
                        No job postings found
                    </MudText>
                    <MudText Typo="Typo.body2" Style="color: #9ca3af;" Class="mb-4">
                        Get started by creating your first job posting
                    </MudText>
                    <MudButton OnClick="AddNewJob" 
                              Variant="Variant.Filled" 
                              Color="Color.Primary"
                              StartIcon="@Icons.Material.Filled.Add">
                        Create Job Post
                    </MudButton>
                </MudPaper>
            </MudItem>
        }
    </MudGrid>
</MudContainer>

@code {
    private string searchString1 = string.Empty;
    private bool isDeleting = false;
    private JobPostingDtos selectedItem1;
    protected List<JobPostingDtos>? jobPostings;


    private ClaimsPrincipal? user;
    private string? fullName;
    private string? email;
    private string? role;
    private string? userId;
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            // Extract values from claims
            var firstName = user.FindFirst(c => c.Type == ClaimTypes.Name)?.Value;
            var lastName = user.FindFirst(c => c.Type == ClaimTypes.Surname)?.Value;
            fullName = $"{firstName} {lastName}";
            email = user.FindFirst(c => c.Type == ClaimTypes.Email)?.Value;
            role = user.FindFirst(c => c.Type == ClaimTypes.Role)?.Value;
            userId = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
        }
        else
        {
            Navigation.NavigateTo("/", true);
        }




        jobPostings = await JobPostingService.RetrieveAllAsync();
    }

    private bool FilterFunc1(JobPostingDtos element)
    {
        if (string.IsNullOrWhiteSpace(searchString1))
            return true;

        return (element.Title?.Contains(searchString1, StringComparison.OrdinalIgnoreCase) ?? false)
            || (element.Description?.Contains(searchString1, StringComparison.OrdinalIgnoreCase) ?? false)
            || (element.JobRequirements?.Contains(searchString1, StringComparison.OrdinalIgnoreCase) ?? false)
            || $"{element.SalaryFrom} {element.SalaryTo}".Contains(searchString1);
    }
    public void AddNewJob()
    {
        Navigation.NavigateTo("/JobPost/JobPostForm");
    }


    public void OnEdit(int id)
    {
        Navigation.NavigateTo($"/JobPost/editjobPost/{id}");
    }
    public async Task OnDelete(int id)
    {
        isDeleting = true;
        try
        {
            var success = await JobPostingService.SoftDeleteJobPost(id);

            if (success)
            {
                Snackbar.Add("Job post deleted successfully.", Severity.Success);
                jobPostings = await JobPostingService.RetrieveAllAsync();
            }
            else
            {
                Snackbar.Add("Failed to delete job post.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception during soft delete: {ex.Message}");
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
        finally
        {
            isDeleting = false;
        }
    }
}