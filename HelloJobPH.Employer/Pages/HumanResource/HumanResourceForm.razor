@page "/humanresource/addHumanResource"
@page "/humanresource/addHumanResource/{HumanResourceId:int}"
@using MudBlazor
@inject NavigationManager NavigationManager
@inject IHumanResource _humanService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-6 mb-8">
    <!-- Header Section -->
    <MudPaper Elevation="0" Class="pa-4 mb-4">
        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
            <MudIconButton Icon="@Icons.Material.Filled.ArrowBack"
                           Color="Color.Primary"
                           OnClick="Cancel"
                           Size="Size.Large" />
            <MudStack Spacing="1" Style="flex: 1;">
                <MudText Typo="Typo.h4" Class="fw-bold">
                    @_pageTitle
                </MudText>
                <MudText Typo="Typo.body2" Color="Color.Secondary">
                    @(HumanResourceId.HasValue ? "Update recruiter information" : "Fill in the details to add a new recruiter")
                </MudText>
            </MudStack>
        </MudStack>
    </MudPaper>

    @if (_loading)
    {
        <MudPaper Class="pa-8" Elevation="2">
            <MudStack AlignItems="AlignItems.Center" Spacing="3">
                <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
                <MudText Typo="Typo.body1" Color="Color.Secondary">Loading data...</MudText>
            </MudStack>
        </MudPaper>
    }
    else
    {
        <MudPaper Elevation="2" Class="pa-6 rounded-lg">
            <MudForm @ref="_form" OnValidSubmit="HandleValidSubmit">
                <MudStack Spacing="4">
                    <!-- Personal Information Section -->
                    <MudStack Spacing="1">
                        <MudText Typo="Typo.h6" Class="fw-bold">
                            <MudIcon Icon="@Icons.Material.Filled.Person" Size="Size.Small" Class="mr-1" />
                            Personal Information
                        </MudText>
                        <MudDivider />
                    </MudStack>

                    <MudGrid Spacing="3">
                        <MudItem xs="12" sm="6">
                            <MudTextField @bind-Value="humanResource.Firstname"
                                          Label="First Name"
                                          Required="true"
                                          For="@(() => humanResource.Firstname)"
                                          Variant="Variant.Outlined"
                                          Adornment="Adornment.Start"
                                          AdornmentIcon="@Icons.Material.Filled.Badge" />
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudTextField @bind-Value="humanResource.Lastname"
                                          Label="Last Name"
                                          Required="true"
                                          For="@(() => humanResource.Lastname)"
                                          Variant="Variant.Outlined"
                                          Adornment="Adornment.Start"
                                          AdornmentIcon="@Icons.Material.Filled.Badge" />
                        </MudItem>
                    </MudGrid>

                    <!-- Contact Information Section -->
                    <MudStack Spacing="1" Class="mt-2">
                        <MudText Typo="Typo.h6" Class="fw-bold">
                            <MudIcon Icon="@Icons.Material.Filled.ContactMail" Size="Size.Small" Class="mr-1" />
                            Contact Information
                        </MudText>
                        <MudDivider />
                    </MudStack>

                    <MudGrid Spacing="3">
                        <MudItem xs="12" sm="6">
                            <MudTextField @bind-Value="humanResource.Email"
                                          Label="Email Address"
                                          Required="true"
                                          For="@(() => humanResource.Email)"
                                          Variant="Variant.Outlined"
                                          Adornment="Adornment.Start"
                                          AdornmentIcon="@Icons.Material.Filled.Email"
                                          HelperText="Work email address" />
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudTextField @bind-Value="humanResource.PhoneNumber"
                                          Label="Phone Number"
                                          For="@(() => humanResource.PhoneNumber)"
                                          Variant="Variant.Outlined"
                                          Adornment="Adornment.Start"
                                          AdornmentIcon="@Icons.Material.Filled.Phone"
                                          HelperText="Contact number" />
                        </MudItem>
                    </MudGrid>

                    <!-- Professional Information Section -->
                    <MudStack Spacing="1" Class="mt-2">
                        <MudText Typo="Typo.h6" Class="fw-bold">
                            <MudIcon Icon="@Icons.Material.Filled.Work" Size="Size.Small" Class="mr-1" />
                            Professional Information
                        </MudText>
                        <MudDivider />
                    </MudStack>

                    <MudGrid Spacing="3">
                        <MudItem xs="12" sm="6">
                            <MudTextField @bind-Value="humanResource.JobTitle"
                                          Label="Job Title"
                                          For="@(() => humanResource.JobTitle)"
                                          Variant="Variant.Outlined"
                                          Adornment="Adornment.Start"
                                          AdornmentIcon="@Icons.Material.Filled.WorkOutline"
                                          HelperText="Current position" />
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudTextField @bind-Value="humanResource.ProfilePhotoUrl"
                                          Label="Profile Photo URL"
                                          For="@(() => humanResource.ProfilePhotoUrl)"
                                          Variant="Variant.Outlined"
                                          Adornment="Adornment.Start"
                                          AdornmentIcon="@Icons.Material.Filled.Image"
                                          HelperText="Optional profile image" />
                        </MudItem>
                    </MudGrid>

                    <!-- Security Section -->
                    <MudStack Spacing="1" Class="mt-2">
                        <MudText Typo="Typo.h6" Class="fw-bold">
                            <MudIcon Icon="@Icons.Material.Filled.Security" Size="Size.Small" Class="mr-1" />
                            Security
                        </MudText>
                        <MudDivider />
                    </MudStack>

                    <MudTextField @bind-Value="humanResource.Password"
                                  Label="Password"
                                  For="@(() => humanResource.Password)"
                                  InputType="@(isPasswordVisible? InputType.Text: InputType.Password)"
                                  Variant="Variant.Outlined"
                                  Adornment="Adornment.End"
                                  AdornmentIcon="@(isPasswordVisible? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff)"
                                  OnAdornmentClick="@TogglePasswordVisibility"
                                  HelperText="@(HumanResourceId.HasValue ? "Leave blank to keep current password" : "Create a secure password")" />

                    <!-- Action Buttons -->
                    <MudDivider Class="my-2" />

                    <MudStack Row="true" Justify="Justify.FlexEnd" Spacing="2" Class="mt-2">
                        <MudButton Variant="Variant.Outlined"
                                   Color="Color.Default"
                                   OnClick="Cancel"
                                   StartIcon="@Icons.Material.Filled.Cancel"
                                   Size="Size.Large">
                            Cancel
                        </MudButton>
                        <MudButton Type="button"
                                   OnClick="SubmitForm"
                                   Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.Save"
                                   Size="Size.Large">
                            @(HumanResourceId.HasValue ? "Update Recruiter" : "Add Recruiter")
                        </MudButton>
                    </MudStack>
                </MudStack>
            </MudForm>
        </MudPaper>
    }
</MudContainer>

@code {
    private HumanResourceDtos humanResource = new();
    [Parameter] public int? HumanResourceId { get; set; }
    private bool isPasswordVisible;
    private MudForm _form;
    private bool _loading = true;
    private string _pageTitle = "Add New Human Resource";

    protected override async Task OnInitializedAsync()
    {
        if (HumanResourceId.HasValue)
        {
            try
            {
                _pageTitle = "Edit Human Resource";


                humanResource = await _humanService.GetSingle(HumanResourceId.Value);

                if (humanResource == null)
                {
                    Snackbar.Add($"Human resource with ID {HumanResourceId} not found.", Severity.Error);
                    NavigationManager.NavigateTo("/HumanResource/Recruiter");
                    return;
                }

                Snackbar.Add($"Editing {humanResource.Firstname} {humanResource.Lastname}", Severity.Info);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error loading data: {ex.Message}", Severity.Error);
                NavigationManager.NavigateTo("/HumanResource/Recruiter");
            }
        }

        _loading = false;
    }

    private void TogglePasswordVisibility()
    {
        isPasswordVisible = !isPasswordVisible;
    }

    private async Task SubmitForm()
    {
        await _form.Validate();
        if (_form.IsValid)
        {
            try
            {
                if (HumanResourceId.HasValue)
                {
                    // Update existing record
                    await _humanService.UpdateAsync(humanResource);
                    Snackbar.Add("Successfully updated!", Severity.Success);
                }
                else
                {
                    // Add new record
                    await _humanService.AddAsync(humanResource);
                    Snackbar.Add("Successfully created!", Severity.Success);
                }

                NavigationManager.NavigateTo("/humanresource/Recruiter");
            }
            catch (HttpRequestException ex)
            {
                Snackbar.Add($"HTTP Error: {ex.Message}", Severity.Error);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Unexpected error: {ex.Message}", Severity.Error);
            }
        }
        else
        {
            Snackbar.Add("Please fill all required fields.", Severity.Error);
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/humanresource/Recruiter");
    }
}