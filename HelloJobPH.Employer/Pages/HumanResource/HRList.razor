@page "/HumanResource/Recruiter"
@using MudBlazor
@inject NavigationManager NavigationManager
@inject IHumanResource _humanService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudButton OnClick="AddNewRecruiter" Variant="Variant.Filled" Color="Color.Primary" Class="mb-4">Add New Recruiter</MudButton>




<MudContainer Class="mt-4">
    <MudText Typo="Typo.h5" GutterBottom="true">Human Resource</MudText>

    @if (HumanResources == null)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    }
    else if (!HumanResources.Any())
    {
        <MudText>No available.</MudText>
    }
    else
    {
        <MudGrid>
            @foreach (var hr in HumanResources)
            {
                <MudItem xs="12" sm="6" md="4" lg="3">
                    <MudCard Class="mb-4">
                    
                        <MudCardMedia Image="images/door.jpg" Height="200" /> @* -----------IMAGE OF HUMAN RESOURCE----------------- *@             
                        <MudCardContent>
                            <MudText Typo="Typo.h6">@hr.Firstname @hr.Lastname</MudText>
                            <MudText Typo="Typo.body2" Class="mb-2">@hr.JobTitle</MudText>
                            <MudText Typo="Typo.caption" Color="Color.Secondary">
                                @hr.Email
                            </MudText>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton Variant="Variant.Text" OnClick="@(() => OnEdit(@hr.HumanResourceId))" Color="Color.Primary">Edit</MudButton>
                            <MudButton Variant="Variant.Text" OnClick="@(() => OnDelete(hr.HumanResourceId))" Color="Color.Error">Remove</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    }
</MudContainer>


@* <MudTable Items="@HumanResources" Filter="FilterFunc1" @bind-SelectedItem="selectedItem1" Hover="true" Elevation="1">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Human Resource</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" />
    </ToolBarContent>

    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Email</MudTh>
        <MudTh>Phone</MudTh>
        <MudTh>Position</MudTh>
        <MudTh>Options</MudTh>
    </HeaderContent>

    <RowTemplate>
        <MudTd DataLabel="Firstname">@context.Firstname @context.Lastname</MudTd>
        <MudTd DataLabel="Email">@context.Email</MudTd>
        <MudTd DataLabel="Phone">@context.PhoneNumber</MudTd>
        <MudTd DataLabel="Position">@context.JobTitle</MudTd>
        <MudTd DataLabel="Options">
            <MudButton Color="Color.Primary" Variant="Variant.Outlined" OnClick="@(() => OnEdit(context.HumanResourceId))" Size="Size.Small">
                Edit
            </MudButton>
            <MudButton Color="Color.Error" Variant="Variant.Outlined" Size="Size.Small" Disabled="@isDeleting" OnClick="@(() => OnDelete(context.HumanResourceId))" Class="ml-2">
                Delete
            </MudButton>
        </MudTd>
    </RowTemplate>

    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable> *@

@code{
                 private string searchString1 = string.Empty;
private bool isDeleting = false;
private HumanResourceDtos? selectedItem1;
protected List<HumanResourceDtos>? HumanResources;

private bool FilterFunc1(HumanResourceDtos element)
{
    if (string.IsNullOrWhiteSpace(searchString1))
        return true;

    return (element.Firstname?.Contains(searchString1, StringComparison.OrdinalIgnoreCase) ?? false)
        || (element.Lastname?.Contains(searchString1, StringComparison.OrdinalIgnoreCase) ?? false)
        || (element.Email?.Contains(searchString1, StringComparison.OrdinalIgnoreCase) ?? false)
        || (element.PhoneNumber?.Contains(searchString1, StringComparison.OrdinalIgnoreCase) ?? false)
        || (element.JobTitle?.Contains(searchString1, StringComparison.OrdinalIgnoreCase) ?? false);
}

public void AddNewRecruiter()
{
        NavigationManager.NavigateTo("/humanresource/addHumanResource");
}
public void OnEdit(int id)
{
    NavigationManager.NavigateTo($"/humanresource/addHumanResource/{id}");
}
public async Task OnDelete(int id)
{
    isDeleting = true;
    try
    {
        var success = await _humanService.SoftDeleteJobPost(id);

        if (success)
        {
            Snackbar.Add("Job post deleted successfully.", Severity.Success);
            HumanResources = await _humanService.RetrieveAllAsync();
        }
        else
        {
            Snackbar.Add("Failed to delete job post.", Severity.Error);
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Exception during soft delete: {ex.Message}");
        Snackbar.Add($"Error: {ex.Message}", Severity.Error);
    }
    finally
    {
        isDeleting = false;
    }
}

protected override async Task OnInitializedAsync()
{
    HumanResources = await _humanService.RetrieveAllAsync();
}
    }
            